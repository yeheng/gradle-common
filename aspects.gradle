plugins {
	id 'java'
}

configurations {
    rt
    ajc
    aspects
    ajInpath
    compile {
        extendsFrom aspects
    }
}

dependencies {
    implementation "org.aspectj:aspectjrt:1.9.1"
    implementation "org.aspectj:aspectjweaver:1.9.1"
    aspectjtools "org.aspectj:aspectjtools:1.9.1"
}

def aspectj = { destDir, aspectPath, inpath, classpath ->

    ant.taskdef(resource: "org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties",
            classpath: configurations.ajc.asPath)

    ant.iajc(
            maxmem: "1024m", fork: "true", Xlint: "warn", "verbose": "true", "showWeaveInfo": "true",
            destDir: destDir,
            aspectPath: aspectPath + File.pathSeparator + inpath,
            inpath: inpath,
            classpath: classpath,
            source: project.sourceCompatibility,
            target: project.targetCompatibility
    )
}

compileJava {
    doLast {
        aspectj project.sourceSets.main.output.classesDirs[0].absolutePath,
                configurations.aspects.asPath,
                project.sourceSets.main.output.classesDirs[0].absolutePath + File.pathSeparator + configurations.ajInpath.asPath,
                project.sourceSets.main.runtimeClasspath.asPath
    }
}

compileTestJava {
    dependsOn jar

    doLast {
        aspectj project.sourceSets.test.output.classesDirs[0].absolutePath,
                configurations.aspects.asPath + File.pathSeparator + jar.archivePath,
                project.sourceSets.test.output.classesDirs[0].absolutePath + File.pathSeparator +
                        project.sourceSets.main.output.classesDirs[0].absolutePath + File.pathSeparator + configurations.ajInpath.asPath,
                project.sourceSets.test.runtimeClasspath.asPath
    }
}